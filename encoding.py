from constraint import *
from string import Template
import pdb

CPP_RS2_MODE_ADDRESS_LSB = 56
CPP_RS2_MODE_ADDRESS_LEN =  8
CPP_RS2_ADDRESS_LSB = 0
CPP_RS2_ADDRESS_LEN = 48

CPP_RS1_LENGTH_LEN = 5
CPP_RS1_BYTE_MASK_LSB = 21
CPP_RS1_BYTE_MASK_LEN = 8
CPP_RS1_LENGTH_LSB = 16

CPP_RS1_SIGNAL_REF_RELATIVE_LSB = 29
CPP_RS1_SIGNAL_REF_RELATIVE_LEN = 3
CPP_RS1_DATA_REF_RELATIVE_LSB = 0
CPP_RS1_DATA_REF_RELATIVE_LEN = 10

CPP_MEM_REFLECT_ADDRESS_ISLAND_LEN = 7
CPP_MEM_REFLECT_ADDRESS_ISLAND_LSB = 24
CPP_MEM_REFLECT_ADDRESS_ADDR_LO_LEN = 2
CPP_MEM_REFLECT_ADDRESS_ADDR_LO_LSB = 19
CPP_MEM_REFLECT_ADDRESS_RFPC_NUM_LEN = 4
CPP_MEM_REFLECT_ADDRESS_RFPC_NUM_LSB = 15
CPP_MEM_REFLECT_ADDRESS_IMB_PORT_LEN = 5
CPP_MEM_REFLECT_ADDRESS_IMB_PORT_LSB = 10
CPP_MEM_REFLECT_ADDRESS_ADDR_HI_LEN = 8
CPP_MEM_REFLECT_ADDRESS_ADDR_HI_LSB = 2




def CPP_MEM_REFLECT_ADDRESS(island, imb_port, rfpc_num, address):
	    return (
        ((island & ((1 << CPP_MEM_REFLECT_ADDRESS_ISLAND_LEN) - 1)) << CPP_MEM_REFLECT_ADDRESS_ISLAND_LSB) |
        ((address & ((1 << CPP_MEM_REFLECT_ADDRESS_ADDR_LO_LEN) - 1)) << CPP_MEM_REFLECT_ADDRESS_ADDR_LO_LSB) |
        ((rfpc_num & ((1 << CPP_MEM_REFLECT_ADDRESS_RFPC_NUM_LEN) - 1)) << CPP_MEM_REFLECT_ADDRESS_RFPC_NUM_LSB) |
	((imb_port & ((1 << CPP_MEM_REFLECT_ADDRESS_IMB_PORT_LEN) - 1)) << CPP_MEM_REFLECT_ADDRESS_IMB_PORT_LSB) |
	(((address >> CPP_MEM_REFLECT_ADDRESS_ADDR_LO_LEN) & ((1 << CPP_MEM_REFLECT_ADDRESS_ADDR_HI_LEN) -1))  << CPP_MEM_REFLECT_ADDRESS_ADDR_HI_LSB) )

def CPP_RS1(signal_ref, length, data_ref):
    return (
        ((signal_ref & ((1 << CPP_RS1_SIGNAL_REF_RELATIVE_LEN) - 1)) << CPP_RS1_SIGNAL_REF_RELATIVE_LSB) |
        ((length & ((1 << CPP_RS1_LENGTH_LEN) - 1)) << CPP_RS1_LENGTH_LSB) |
        ((data_ref & ((1 << CPP_RS1_DATA_REF_RELATIVE_LEN) - 1)) << CPP_RS1_DATA_REF_RELATIVE_LSB)
    )

def CPP_RS2(mode_addr, target_addr):
    return (
        ((mode_addr & ((1 << CPP_RS2_MODE_ADDRESS_LEN) - 1)) << CPP_RS2_MODE_ADDRESS_LSB) |
        ((target_addr & ((1 << CPP_RS2_ADDRESS_LEN) - 1)) << CPP_RS2_ADDRESS_LSB)
    )

def CPP_IMM12(action, token, target):
    CPP_IMM12_ACTION_LSB =  6
    CPP_IMM12_ACTION_LEN = 6
    CPP_IMM12_TOKEN_LSB = 4
    CPP_IMM12_TOKEN_LEN = 2
    CPP_IMM12_TARGET_LSB = 0
    CPP_IMM12_TARGET_LEN = 4

    result = (
        ((action & ((1 << CPP_IMM12_ACTION_LEN) - 1)) << CPP_IMM12_ACTION_LSB) |
        ((token & ((1 << CPP_IMM12_TOKEN_LEN) - 1)) << CPP_IMM12_TOKEN_LSB) |
        ((target & ((1 << CPP_IMM12_TARGET_LEN) - 1)) << CPP_IMM12_TARGET_LSB)
    )
    return result